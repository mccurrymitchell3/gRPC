{{- $fullName := include "grpc-demo.fullname" . -}}
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ $fullName }}-transcoder
  namespace: istio-system
spec:
  workloadLabels:
    app.kubernetes.io/name : {{ $fullName }}
  filters:
  - listenerMatch:
      portNumber: {{ .Values.service.port }}
      listenerType: SIDECAR_INBOUND
    insertPosition:
      index: BEFORE
      relativeTo: envoy.router
    filterName: envoy.grpc_json_transcoder
    filterType: HTTP
    filterConfig:
      services:
      - PingPongService
      protoDescriptorBin: 
      printOptions:
        alwaysPrintPrimitiveFields: True
